c
@session = Stripe::Checkout::Session.create({
      payment_method_types: ['card'],
      line_items: [
        price_data: {
          unit_amount: product.price.to_i,
          currency: 'sgd',
          product_data: {
            name: product.name
          },
        },
        quantity: 1,
      ],
      mode: 'payment',
      success_url: 'https://example.com/success',
      cancel_url: 'https://example.com/cancel',
    })
Stripe.api_key = ENV['STRIPE_SECRET_KEY']
Stripe::Checkout::Session.create({
      payment_method_types: ['card'],
      line_items: [
        price_data: {
          unit_amount: product.price.to_i,
          currency: 'sgd',
          product_data: {
            name: product.name
          },
        },
        quantity: 1,
      ],
      mode: 'payment',
      success_url: 'https://example.com/success',
      cancel_url: 'https://example.com/cancel',
    })
Stripe::Checkout::Session
Stripe.all
Stripe
Stripe.api_key
ENV['STRIPE_SECRET_KEY']
[200~ENV['STRIPE_SECRET_KEY']~
c
Stripe.api_key
c
Stripe.api_key
Rails.application.config.filter_parameters
TELEGRAM_CHAT_ID_PRIVATE
JAKARTA_DDMMYYHHMM
Stripe.api_key
c
User.first.payment_processor
User.first
q
User.first
user
current_user
c
@session = Stripe::Checkout::Session.create({
      payment_method_types: ['card'],
      line_items: [
        price_data: {
          unit_amount: product.price.to_i,
          currency: 'sgd',
          product_data: {
            name: product.name
          },
        },
        quantity: 1,
      ],
      mode: 'payment',
      success_url: 'https://example.com/success',
      cancel_url: 'https://example.com/cancel',
    })
    })~
      cancel_url: 'https://example.com/cancel',
      success_url: 'https://example.com/success',
      mode: 'payment',
      ],
        quantity: 1,
        },
          },
            name: product.name
          product_data: {
          currency: 'sgd',
          unit_amount: product.price.to_i,
        price_data: {
      line_items: [
      payment_method_types: ['card'],
[200~@session = Stripe::Checkout::Session.create({
c
@products
@porudcts
c
File.exists?("public/qr_code.svg")
Rails.application.assets.find_asset("public/qr_code.svg")
@has_svg = Rails.application.assets.find_asset("public/qr_code.svg") != nil
Rails.application.assets.find_asset("qr_code.svg")
Rails.application.assets.find_asset("/public/qr_code.svg")
Rails.application.assets.find_asset("#{Rails.root}/public/qr_code.svg")
Rails.application.assets.find_asset("#{Rails.root}/public/qr_code.svg") != nil
c
Rails.application.assets.find_asset("#{Rails.root}/public/qr_code.svg") != nil
c
@qr_as_svg
c
send_data RQRCode::QRCode.new(params[:content].to_s).as_png(size: 300), type: 'image/png', disposition: 'attachment'
RQRCode::QRCode.new(params[:content].to_s).as_png(size: 300), type: 'image/png', disposition: 'attachment'\
c
browser.platform.name
browser.device.name
q
browser.device.name
browser.platform.name
browser.version
browser.edge?
browser.bot.name
browser = Browser.new("Some User Agent", accept_language: "en-us")
browser.bot.search_engine?
browser.bot.name
browser.platform.linux?
browser.platform.version
browser.platform.name
browser.platform
browser.device.name
browser.device
browser.bot
browser
browser.bot.name
q
request.ip
q
(Time.zone.now + 7.hours).strftime('%d/%m/%Y %H:%S')
q
(Time.zone.now + 7.hours).strftime('%d/%m/%Y')
(Time.zone.now + 7.hours).strftime('%d/%M/%Y')
Time.zone(JAKARTA).now
JAKARTA
q
JAKARTA
c
@user.image.attached?
@user.image
c
@user.image.attached?
@user.image
c
@user.image.email
@user.image
@user.image.url
@user.image
@user
c
draft_user.image
c
image.variant
image
self.image.variant(resize: '300x300').processed
self.image.variant(resize: '300x300')
self.image
c
image.variant.processed
image.variant
image
c
self.image.variant(resize: '300x300')
self.image.variant
self.image
image
c
filtered_user.image.thumb.url
filtered_user.image.thumb
filtered_user.image
c
filtered_user.image.attached?
filtered_user.image
c
params['user']['image']
params['user']
params
update_params
c
rules[' must contain at least one lowercase letter'] == password
password == password = password.presence || password_digest
password = password.presence || password_digest
rules[' must contain at least one lowercase letter']
rules[0]
rules
q
password = password.presence || password_digest
q
id.present?
id.nil?
self.new?
new?
q
draft_user.save
draft_user.errors.any?
c
self.password_digest
self.password
self
password
c
@user.email
@user
c
session[:user_uuid]
sessuin[:user_uuid]
session
@user
c
calculate_params
request.filtered_parameters
request
request.filtered_parameters
filtered_parameters
request.filtered_parameters?
request
c
error
e
response
response.message
STDERR.puts
response.message
response.status
response.errors
response
errors
response
notice
c
Prawn::Document.new
c
HomeLoan.new.build
c
HomeLoansHelper
HomeLoan.new.build
c
Prawn::Document.new do
      text "Test Title", align: :center
      text "Address"
      text "Email"
    end.render
PrawnRails
Prawn
Prawn::Document
c
Prawn::Document.new
ApplicationController
c
Prawn::Document.new
c
pdf.text "Hello World!"
c
q
0.1e7
(monthly_interest_rate * initial_amount)
total_months
initial_amount
q
session['flash']['flashes']
session['flash']['flashses']
session['flash']
session['amount']
session['flashes']
session
q
session
pp response
c
q
params.permit(:amount, :term_in_years, :monthly_interest_rate)
skip_before_action :verify_authenticity_token
c
params.permit(:amount, :term_in_years, :monthly_interest_rate)
params
c
@user.activated?
@user.verify?
@user.verify
@user.status == User.statuses[:verify]
@user.status
User.statuses[:verify]
@user.status
c
@user
