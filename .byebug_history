c
session[:user_uuid]
sessuin[:user_uuid]
session
@user
c
calculate_params
request.filtered_parameters
request
request.filtered_parameters
filtered_parameters
request.filtered_parameters?
request
c
error
e
response
response.message
STDERR.puts
response.message
response.status
response.errors
response
errors
response
notice
c
Prawn::Document.new
c
HomeLoan.new.build
c
HomeLoansHelper
HomeLoan.new.build
c
Prawn::Document.new do
      text "Test Title", align: :center
      text "Address"
      text "Email"
    end.render
PrawnRails
Prawn
Prawn::Document
c
Prawn::Document.new
ApplicationController
c
Prawn::Document.new
c
pdf.text "Hello World!"
c
q
0.1e7
(monthly_interest_rate * initial_amount)
total_months
initial_amount
q
session['flash']['flashes']
session['flash']['flashses']
session['flash']
session['amount']
session['flashes']
session
q
session
pp response
c
q
params.permit(:amount, :term_in_years, :monthly_interest_rate)
skip_before_action :verify_authenticity_token
c
params.permit(:amount, :term_in_years, :monthly_interest_rate)
params
c
@user.activated?
@user.verify?
@user.verify
@user.status == User.statuses[:verify]
@user.status
User.statuses[:verify]
@user.status
c
@user
c
@user.status == 'activated'
@user.status
@user.status == User.statuses[:activated]
c
@user.password_digest
@user.password
c
@user.errors.full_messages
@user.errors.any?
c
C
@user.otp == verify_params[:otp]
q
veriy_params[:otp]
veriy_params
verify_params[:otp]
, notice: "Successfully started new session"
@user.otp
c
params
c
otp
q
otp
c
client.messages.create(
      body: "Thank you for signing up #{name}! Here is your OTP code: #{otp}",
      messaging_service_sid: service_sid.to_s,
      to: phone.to_s
    )
phone.to_s
service_sid.to_s
[200~service_sid.to_s~
c
@user.otp.to_s
@user.otp
@user
q
User.statuses[:activated]
User.statuses[:ok]
User.all.map(&:status)
c
verification_service
q
verification_service
q
response.body
response
q
response.body
response
c
response = VerificationService.new(
      send_otp_params[:phone]
    ).send_otp_code
c
response = VerificationService.new(
      send_otp_params[:phone]
    ).send_otp_code
send_otp_params
c
session[:user_uuid]
session
c
@user.present? && BCrypt::Password.new(@user.password_digest) == new_session_params[:password_digest]
c
@user.password_digest == new_session_params[:password_digest]
@user.password_digest
new_session_params[:password_digest]
@user.password_digest == new_session_params[:password_digest]
@user.password_digest
@user
c
$2a$12$ypqkSGwuH4py33rqaUIfte/49Y5WnMHtjhlHNfKfIKGjuwhZG2Mee == 1234abcd
$2a$12$ypqkSGwuH4py33rqaUIfte/49Y5WnMHtjhlHNfKfIKGjuwhZG2Mee = 1234abcd
"$2a$12$ypqkSGwuH4py33rqaUIfte/49Y5WnMHtjhlHNfKfIKGjuwhZG2Mee" == '1234abcd'
@user.password_digest = BCrypt::Password.create(params[:user][:password_digest])
params[:user][:password_digest]
params[:user]
c
Password.create('1234abcd')
c
create_params[:password_digest]
@user.try(:authenticate, create_params[:password_digest])
create_params[:password_digest]
create_params
c
params.permit(:email, :password_digest, :name, :phone)
params
create_params
create_params.valid?
params
create_params
@user
c
@user.errors
@user.save
c
@user.savec
@user.save!
@user.save
c
create_params
c
create_params
c
c\
create_params
c
q
params.require(:user).permit(:email, :password)
create_params
@user
c
I18n.t 'hello'
i18n.t 'hello'
@user.errors
@user.save
c
@user.save
c
params.permit(:email, :password)
params.permit(:user)
params
c
params
c
params
c
session['brand_id']
session
c
@vision
c
@vision
c
session['session_id']
session['id']
session['current_user_id']
session.inspect
session
c
session.inspect
session['session_id']
session
c
@vision[2]
@vision = []
new_params
c
new_params
c
new_params['vision']
new_params
c
params
c
@brand.save
c
"" == nil
"" == null
@brand
create_params
@brand.save
